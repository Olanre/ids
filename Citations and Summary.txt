Kim, Myung-Sup, et al. "A flow-based method for abnormal network traffic detection." 2004 IEEE/IFIP network operations and management symposium (IEEE Cat. No. 04CH37507). Vol. 1. IEEE, 2004.

Today, the number of Internet users is continuously increasing, along with new network services. As the internet grows, network security attack threats have become more serious. 
One recent trend in network security attacks is an increasing number of indirect attacks which influence network traffic negatively, instead of directly entering a system and damaging it. In future, damages from this type of attack are expected to
become more serious.  The attacks on a famous website, such as Yahoo, E-bay, and E*trade, are good examples [1, 2]. In addition, the bandwidth consumption by these attacks influences the entire network performance.
Even on highly over-provisioned links, malicious traffic causes an increase in the average DNS latency by 230% and an increase in the average web latency by 30% [6].
Flooding attacks transmit many spurious packets to the target system, and waste CPU, memory, and network resources. In case of TCP SYN flood [14], the victim receives packets that exceed buffer of the data structure limit and cripple its service
Also, ICMP, TCP, and UDP flooding attacks [16] overwhelm bandwidth by sending useless traffic to the victim.


To detect the attacks described above, network-based Intrusion Detection Systems (NIDS), such as snort [19], in a packet header or payload. Signature-based detecting systems require a huge database that contains information on every attack.
It causes much system overhead to compare every packet with the signatures in the database. Therefore, these systems are not appropriate in a high-speed network. Thus, if a new or mutant attack appears, the signature detecting method cannot
catch it. In addition, packet information may be insufficient because some types of attack can be detected only by using from a series of packets information. Other types of detecting methods have been suggested. These approaches
monitor the volume of traffic which every single host has received [20, 21] or the number of new source IP addresses [22]. These methods identify attacks by checking the volume of traffic or the number of new source IP addresses. These
methods may have low overhead, but can result false alarms. To reduce false alarms, it is necessary to use all the possible traffic parameters.


This paper focuses on detecting abnormal network traffic which includes those generated by internet worms[6], DoS/DDoS and scanning[24], scanning which include both port and network scanning. We present a detecting method and a
system prototype. We analyze network traffic based on flows, which is defined as collections of packets that travel between the same end points [8].  By aggregating packets that belong to the identical flow, we can reduce processing overhead in the system. We suggest a detecting algorithm using changes in traffic patterns that appear during attacks.
The detection module receives flow information from monitoring systems or routers. the overall process consists of two parts: the flow header detection and the traffic pattern detection. The flow header detection takes part in checking the fields of the flow headers.
By validating these values, this part mainly detects logic attacks.


The flow header detection part checks the field values of a flow header. The diagram in Figure 2 classifies attacks by the field values of the flow header. This part can detect logic attacks or other attacks with a specific header such as
broadcast destination or specific port numbers. We define flow as a collection of packets with the same 5-tuple: source IP address, destination IP address, source port, destination port, and protocol number.
The flow size and packet count, refer to the total bytes and the number of packets that belongs to the flow, respectively.

ICMP attacks:
If the transport protocol is ICMP and its type is echo request and destination is broadcast, then this flow is determined to be a smurf attack. The reason is that the attack mainly sends spoofed source IP packets to the destinations of broadcast.
Additionally, this phase can detect a Ping-of-Death attack flow by validating whether the length of the de-fragmented packet is larger than the limited length that an IP packet can have.

TCP attacks
In the case of a TCP transport protocol; this part certifies if the pair of source IP, source port is identical with the pair of destination IP, destination port for the purpose of detecting a Land attack.
The TCP SYN flood induces a lot of flow activities, because it sends many packets to a specific port of the victim. Also, the packet count and total packet length in each flow are small, as this attack sends small SYN packets. However, the total bandwidth and total packet count vary according to the number of transmitted packets.


UDP attacks:
In UDP flows, Fraggle and Ping-Pong attacks use UDP reflecting services, such as echo (port 7), chargen (port 19), daytime (port13), and qotd (port 17). Therefore, the port numbers of source and destination port are validated. If both
destination and source ports are reflecting port numbers, then this flow is used for the Ping-Pong attack. Also, if the destination port is a reflecting port and the destination IP is a broadcast address, the flow is supposed to be a Fraggle attack, similar to the Smurf attack.


Scanning attacks:
During scanning, the attacker makes many connection attempts. Consequently, many flows are generated and the packet count in each flow is small, when a scanning occurs. In addition, the packet size is mostly small (about 40 bytes), because the attacker sends small packets and observes responses from these packets.

All layers:
In each transport protocol, the flow header detection part searches flows with a large packet count and flow size in order to identify flooding flows. For example, if a large number of ICMP packets and its flow size is large, then it is determined to
be an ICMP flooding. To determine whether the flow size and packet count of a flow are large or not, currently we are using a percentile threshold value to total flow size and total packet count.


When discovering the traffic patterns described in Table 1, some attacks are not possible to detect only with the flow information. Therefore, we generate traffic pattern data by aggregating related flows. In order to check traffic characteristics, we generate traffic information that are sent and received from a certain host.
See table 2 for the Network Parameters in the anomaly detection and figure 4 for the chain of detection.
References
[1] CNN, Immense network assault takes down yahoo, February 2000, http://www.cnn.com/2000/TECH/computing/02/08/yahoo.assault.idg/index.ht ml.
[2] CNN, Cyber-attacks batter web heavyweights, February 2000, http://www.cnn.com/2000/TECH/computing/02/09/cyber.attacks.01/.
[6] Kun-chan Lan, Alefiya Hussain, and Debojyoti Dutta, “Effect of Malicious Traffic on the Network,” Proc. of PAM 2003, San Diego, California, April 2003.
[8] Siegfried Lifler, “Using Flows for Analysis and Measurement of Internet Traffic,” Diploma Thesis, Istitute of Communication Network and Computer Engineering, University of Stuttgart, Germany, 1997.
[14] Common Vulnerabilities and Exposures (CVE), “SYN flood (CVE-1999-0116),” http://www.cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-1999-0116.
[16] Common Vulnerabilities and Exposures (CVE), “UDP packet storm (CVE- 1999-0103),” http://www.cve.mitre.org/cgi-bin/cvename.cgi?name=CVE- 1999-0103.
[19] M. Roesch, “Snort - lightweight intrusion detection for networks,” http://www.snort.org.
[20] Rudolf B. Blazek, Hongjoong Kim, Boris Rozovskii, and Alexander Tartakovsky, “A novel approach to detection of denial-of-service attacks via adaptive sequential and batch sequential change-point detection methods,” Pro. of IEEE Systems, Man and Cybernetics Information Assurance Workshop, New York, June 2001.
[21] David K. Y. Yau, John C. S. Lui, and Feng Lian, “Defending against distributed denial-of-service attacks with max-min fair server-centric router throttles,” Proc. of IEEE International Workshop on Quality of Service (IWQoS), Miami Beach, Florida, May 2002.
[22] Tao Peng, Christopher Leckie, and Kotagiri Ramamohanarao, “Detecting Distributed Denial of Service Attacks Using Source IP Address Monitoring,” http://www.ee.mu.oz.au/pgrad/taop/research/detection.pdf.
[24] Urupoj Kanlayasiri, Surasak Sanguanpong, and Wipa Jaratmanachot, “A Rule-based Approach for Port Scanning Detection,” Proc. of the 23nd Electrical Engineering Conference (EECON-23), Chiangmai, Thailand, November 2000.

======================================================================================================================================================================================
Bhuyan, Monowar H., Dhruba Kumar Bhattacharyya, and Jugal K. Kalita. "Network anomaly detection: methods, systems and tools." Ieee communications surveys & tutorials 16.1 (2013): 303-336.

In this paper, we provide a structured and comprehensive overview of various facets of network anomaly detection so that a researcher can become quickly familiar with every aspect of network anomaly detection. We present attacks normally encountered
by network intrusion detection systems. We categorize existing network anomaly detection methods and systems based on the underlying computational techniques used. Within this framework, we briefly describe and compare a large number of network anomaly detection methods and systems.

According to Anderson [2], an intrusion attempt or a threat is a deliberate and unauthorized attempt to (i) access information, (ii) manipulate information, or (iii) render a system unreliable or unusable.
The term anomaly-based intrusion detection in networks refers to the problem of finding exceptional patterns in network traffic that do not conform to the expected normal behavior. These nonconforming patterns are often referred to as anomalies, outliers, exceptions, aberrations, surprises,


Prior research:
An extensive survey of anomaly detection techniques developed in machine learning and statistics has been provided by [8], [9]. Agyemang et al. [10] present a broad review of anomaly detection techniques for numeric as well as symbolic data.
Patcha and Park [6] and Snyder [12] present surveys of anomaly detection techniques used specifically for cyber intrusion detection. Callado et al. [19] report major techniques and problems identified in IP traffic analysis, with an emphasis on application detection. Zhang
et al. [20] present a survey on anomaly detection methods in networks. A review of flow-based intrusion detection is presented by Sperotto et al. [21], who explain the concepts of flow and classified attacks, and provide a detailed discussion of detection techniques for scans, worms, Botnets and DoS attacks.
Wu and Banzhaf [29] present an overview of applications of computational intelligence methods to the problem of intrusion detection

To provide an appropriate solution in network anomaly detection, we need the concept of normality. Consequently, an event or an object is detected as anomalous if its degree of deviation with respect to the profile or behavior of the system, specified by the normality model,
is high enough.

Network intrusion detection has been studied for almost 20 years. Generally, an intruder’s behavior is noticeably different from that of a legitimate user and hence can be detected [41]. IDSs can also be classified based on their deployment in real time.
1) Host-based IDS (HIDS): A HIDSmonitors and analyzes the internals of a computing system rather than its external interfaces [42].
2) Network-based IDS (NIDS): An NIDS deals with detecting intrusions in network data. Intrusions typically occur as anomalous patterns though certain techniques model the data in a sequential fashion and detect anomalous subsequences [42].

Anomaly detection has extensive applications in areas such as fraud detection for credit cards, intrusion detection for cyber security, and military surveillance for enemy activities.
Anomaly detection attempts to find patterns in data, which do not conform to expected normal behavior. The importance of anomaly detection is due to the fact that anomalies in data translate to significant (and often critical) actionable information in a wide variety of application domains [45].
As stated in [35], there are two broad categories of network anomalies: (a) performance related anomalies and (b) security related anomalies. Various examples of performance related anomalies are: broadcast storms, transient congestion, babbling node, paging across the network, and file server failure.
Security related network anomalies may be due to malicious activity of intruder(s) who intentionally flood the network with unnecessary traffic to hijack the bandwidth so that legitimate users are unable to receive service(s).

A. Generic Architecture of ANIDS
1) Anomaly detection engine: This is the heart of any network intrusion detection system. It attempts to detect occurrence of any intrusion either online or offline. However, before sending any network traffic to the detection engine, it needs preprocessing.
	Matching mechanism: It entails looking for a particular pattern or profile in network traffic that can be built by continuous monitoring of network behavior including known exploits or vulnerabilities.
2) Reference data: The reference data stores information about known intrusion signatures or profiles of normal behavior. Reference data needs to be stored in an efficient manner. Possible types of reference data used in the generic architecture of a NIDS are: profile, signature and rule. In case of an ANIDS, it is mostly profiles.	
3) Configuration data: This corresponds to intermediate results, e.g., partially created intrusion signatures.	
4) Alarm: This component of the architecture is responsible for generation of alarm based on the indication received from the detection engine.
5) Human analyst: A human analyst is responsible for analysis, interpretation and for taking necessary action based on the alarm information provided by the detection engine.	
6) Post-processing: This is an important module in a NIDS for post-processing of the generated alarms for diagnosis of actual attacks.
7) Capturing traffic: Traffic capturing is an important module in a NIDS. The raw traffic data is captured at both packet and flow levels.
8) Security manager: Stored intrusion signatures are updated by the Security Manager (SM) as and when new intrusions become known. 

Intrusion detection techniques:
Technique Characteristics
Misuse based (i) Detection is based on a set of rules or signatures for known attacks. (ii) Can detect all known attack patterns based on the reference data. (iii) How to write a signature that encompasses all possible variations of the pertinent attack is a challenging task.
Anomaly based (i) Principal assumption: All intrusive activities are necessarily anomalous. (ii) Such a method builds a normal activity profile and checks whether the system state varies from the established profile by a statistically significant amount to report intrusion attempts. (iii) Anomalous
activities that are not intrusive may be flagged as intrusive. These are false positives. (iv) One should select threshold levels so that neither of the above two problems is unreasonably magnified nor the selection of features to monitor is optimized. (v) Computationally expensive
because of overhead and possibly updating several system profile matrices.
Hybrid (i) Exploits benefits of both misuse and anomaly-based detection techniques. (ii) Attempts to detect known as well as unknown attacks.



======================================================================================================================================================================================
Barford, Paul, and David Plonka. "Characteristics of network traffic flow anomalies." Internet Measurement Workshop. 2001.

Recognizing and identifying anomalous behavior is often based on ad hoc methods developed from years of experience in managing networks. A variety of commercial and open source tools have been developed
to assist in this process, however these require policies and/or or thresholds to be defined by the user in order to trigger alerts. The better the description of the anomalous behavior, the more effective these tools become.

The first step in our project is to gather passive measurements of network traffic at the IP flow level. IP flow level data as defined in [1] is a unidirectional series of IP packets of a given protocol traveling between a source and a destination IP/port pair within a certain period of time.
While flow level data is certainly not as precise as passive measurements of packet level data, we demonstrate that it is sufficient for exposing many different types of aberrant network traffic behavior in close to real time. It also has the benefit of generating much smaller data sets than
packet level measurements which can become a significant issue in large, heavily used networks.
Our anomaly analysis process will be focused on precisely identifying both similarities and differences within each anomaly group. Our goal is not simply to cluster anomalies with similar statistical features but actually to characterize the features of each anomaly group rigorously.
Our analysis approach will employ a variety of tools including simple statistics, time series analysis and wavelet analysis to characterize anomaly features.

Network traffic properties have been intensely studied for quite some time. Examples of analysis of typical traffic behavior can be found in [4], [5]. More detailed characterizations and models of network traffic including the identification of self-similar properties can be found in [6], [7].
Visual analysis of traffic flow anomalies has lead to grouping anomalies into three general categories. These categories are useful for describing general anomaly characteristics however, they may or may not continue to be useful after we complete our characterization work.
Network Operation Anomalies: These include network device outages, significant differences in network behavior caused by configuration changes (e.g. adding new equipment or imposing rate limits) and plateau behavior caused by traffic reaching environmental limits. Anomalies in this category are distinguished visually by steep, nearly instantaneous changes in bit rate followed by bit rates which are stable but at a different level over a time period. An example of a network operation anomalies can be seen in Figure 3.
Flash Crowd Anomalies: In our environment, anomalies in this category are typically due to either a software release (e.g. UW is a RedHat Linux mirror site) or external interest in a Web site due to some kind of national publicity. Flash crowd behavior is distinguished by a rapid rise in traffic flows of a particular type (eg. FTP flows) or to a well known destination with a gradual drop off over time.
Network Abuse Anomalies: Two types of network abuse that can be identified using flows are DoS flood attacks and port scans.  Network abuse anomalies are distinct from network operation and flash crowd anomalies in that they are not always readily apparent in bit or packet rate measurements. However, flow count measurements clearly indicate abuse activity with many distinct source address/port pairs since each connection appears as a separate flow.

[1] K. Claffy, G. Polyzos, and H.-W. Braun, “Internet traffic flow profiling,” Tech. Rep. TR-CS93-328, University of California San Diego, November 1989.
[4] R. C´aceres, “Measurements of wide-area Internet traffic,” Tech. Rep. UCB/CSD 89/550, Computer Science Department, University of California, Berkeley, 1989.
[5] V. Paxson, Measurements and Analysis of End-to-End Internet Dynamics, Ph.D. thesis, University of California Berkeley, 1997.
[6] V. Paxson and S. Floyd, “Wide-area traffic: The failure of poisson modeling,” IEEE/ACM Transactions on Networking, vol. 3(3), pp. 226–244, June 1995.
[7] W. Willinger, M. Taqqu, R. Sherman, and D. Wilson, “Self similarity through high-variability: Statistical analysis of Ethernet LAN traffic at the source level,” IEEE/ACM Transactions on Networking, vol. 5, no. 1, pp. 71–86, February 1997.

======================================================================================================================================================================================
Jiang, Jun, and Symeon Papavassiliou. "Detecting network attacks in the internet via statistical network traffic normality prediction." Journal of Network and Systems Management 12.1 (2004): 51-72.

In this dissertation we present a network anomaly detection methodology, which relies on the analysis of network traffic and the characterization of the dynamic statistical properties of traffic normality, in order to accurately and timely detect network anomalies.
Anomaly detection is based on the concept that perturbations of normal behavior suggest the presence of anomalies, faults, attacks etc. This methodology can be uniformly applied in order to detect network attacks, especially in cases where novel attacks are present and the nature of the intrusion is unknown.
Specifically, in order to provide an accurate identification of the normal network traffic behavior, we first develop an anomaly-tolerant non-stationary traffic prediction technique, which is capable of removing both pulse and continuous anomalies.

In [19] the authors introduced a Resource-Allocating Network that allocates a new computational unit whenever an unusual pattern is presented to the network. This algorithm is suitable for sequential learning and is based on the idea that the number of hidden units
should correspond to the complexity of the underlying function as reflected in the observed signals. RAN [19] was developed to overcome the problem of NP-completeness in learning with fixed size network. I
In this section we introduce the RAN algorithm and describe in detail an anomaly-tolerant non-stationary traffic prediction algorithm based on the RAN algorithm.

RAN can be simplified as a single hidden layer network whose output response to sequential inputs is a linear combination of the hidden unit responses (figure 2.1).
Anomaly Violation Conditions and Detection Since network anomalies may present different characteristics that vary both in amplitude as well as time duration, in the following we define the anomaly detection based on the
above thresholds, as a combined function of both magnitude and duration. The reason of utilizing such a combination of both magnitude and duration, is to highlight the occurrence of anomalies that present a potential degradation in the network performance and behavior,
while minimize the flagging of temporary anomalies that are "non-threatening" for the network's performance.

When the traffic crosses the dynamic threshold, the violation magnitude and the corresponding time will be recorded and an anomaly detection alarm will be sent out if relation (2.17) is satisfied. This indicates that the network is under "anomaly" status and all time frames within the anomaly violation sliding window that are judged as being in anomaly status will be marked.

Attack/Anomaly Models
Two different attacks, namely the mail-bombing attack (scenario 1) and UDP flooding attack (scenario 2) were modeled and used throughout our evaluation. Internet "mailbombing" is the act of sending an extraordinarily large number of duplicate or random
messages via Internet electronic mail to a target whose account typically resides on a system other than the one the messages were originated from.
An UDP flooding attack repeatedly transmits a UDP packet to a specified port at the target machine for a specified period of time. The characteristics of the anomalous injected traffic for the scenario 2 attack ("UDP flooding" attack) are as follows: the repetition interval follows lognormal distribution with parameters (0.37,2.25) and the packet length is exponentially distributed with mean 1000 bits.



======================================================================================================================================================================================
Navaz, A. S., V. Sangeetha, and C. Prabhadevi. "Entropy based anomaly detection system to prevent DDoS attacks in cloud." arXiv preprint arXiv:1308.6745 (2013)
Cloud Computing is a recent computing model; provides consistent access to wide area distributed resources. It revolutionized the IT world with its services provision infrastructure, less maintenance cost, data and service availability assurance, rapid accessibility and scalability

Signature based IDS will perform poor capturing in large volume of anomalies. Another problem is that Cloud Service Provider (CSP) hides the attack that is caused by intruder, due to distributed nature; cloud environment has high possibility for vulnerable resources. By impersonating legitimate users, the intruders can use a service’s abundant resources maliciously. 
In Proposed System we combine few concepts which are available with new intrusion detection techniques. Here to merge Entropy based System with Anomaly detection System for providing multilevel Distributed Denial of Service (DDoS).


Entropy or Shannon-Wiener index is an important concept of information theory, which is a measure of the uncertainty or randomness associated with a random variable or in this case data coming over the network. If it was more random it contains more entropy. The value of sample entropy lies in range [0, logn]. The rate of entropy is lesser when the class distribution is pure i.e.it belongs to one class. The rate of entropy is larger when the class distribution is impure i.e. class distribution belongs to many class.
 Hence comparing the rate of entropy of some sample of packet header fields to that of another sample of packet header fields provides a mechanism for detecting changes in the randomness. The entropy shows its minimum value 0 when all the items (IP address or port) are same and its maximum value logn when all the items are different. Use change of entropy of traffic distributions (IP address, port) for DDoS detection.
 you are interested in measuring the entropy of packets over unique source or destination address then maximum value of n is 232 for ipv4 address. If you want to calculate entropy over various applications port then n is the maximum number of ports. 
 
 The entropy H (X) of a random variable X with possible values {x1, x2…, xn} and distribution of probabilities P = {p1, p2, . . . , pn} with n elements, where 0 <= pi <= 1 and
Here p (xi) where xi belongs to X is the probability that X takes the value xi. Suppose it randomly observe X for a fixed time window w, then p (xi) = mi/m, where mi is the frequency or number of times it observe X taking the value xi

When to calculate probability of any source (destination) address then,
P(x) = Number of pkts with x as src (dst) address  / Total number of packets
 mi = number of packets with xi as source (Destination) address ,m = total number of packets
 
 Here total number of packets is the number of packets seen for a time window T. Similarly it can calculate probability for each source (destination) port as
P(x) = Number of pkts with X as src (dst) port / Total number of pkts

When to calculate with flow size
P(x) = Number of flows with flow size / Total number of flows.

Normalized entropy calculates the over all probability distribution in the captured flow for the time window T. Normalized entropy = (H / log n0)
If NE<th1, th1 is threshold value1, Mark flow as suspected and raise an alert Here nois the number of distinct xi values in the given time window

In a DDoS attack from the captured traffic in time window T, the attack flow dominates the whole traffic, as a result the normalized entropy of the traffic decreased in a detectable manner.

Projected Entropy: According to for a stochastic processes the entropy rate H (x) of two random processes are same:
H(x) = lim (of n to infinity) 1/2H(x1,x2...xn)
If H(x) <=th2, th2 is the threshold value2,Mark the flow as attacked, raise a final alert, discard the attack flow

To handle a large number of data packets flow in such an environment a multi-threaded IDS approach has been proposed in this paper. The multi-threaded IDS would be able to process large amount of data and could reduce the packet loss.
After an efficient processing the proposed IDS would pass the monitored alerts to a third party monitoring service, who would in turn directly inform the cloud user about their system under attack.
======================================================================================================================================================================================
Galtsev, Aleksey A., and Andrei M. Sukhov. "Network attack detection at flow level." Smart Spaces and Next Generation Wired/Wireless Networking. Springer,Berlin, Heidelberg, 2011. 326-334.
In this paper, we propose a new method for detecting unauthorized network intrusions, based on a traffic flow model and Cisco NetFlow protocol application. The method developed allows us not only to detect the most common types of network attack (DDoS and port scanning), but also to make a list of trespassers' IP-addresses.

Currently, Internet information resources are actively growing, penetrating many spheres of social life. Information technologies are being introduced not only into private enterprises, but also in the provision of public services. With each passing
day, more and more confidential transactions are carried out via the Internet. In connection with these trends, the question of computer networks security is starkly raised. Attackers have developed and actively use many types of network intrusion [1,2,3,4], most of which can be prevented by standard methods of protection.
In recent years the rate of end-user connections to the Internet has increased sharply, which has given rise to an increase in the number and intensity of attacks such as DDoS.
Port scanning is used by hackers to conduct "network intelligence". In this article we would like to propose a new method of detecting DDoS attacks and port scanning, based on the Cisco NetFlow protocol [7,8].

A network  flow has been defined in many ways. The traditional Cisco definition is to use a 7-tuple key, where a flow is defined as a unidirectional sequence of packets sharing all of the following 7 values:
{ Source IP address
{ Destination IP address
{ Source port for UDP or TCP, 0 for other protocols
{ Destination port for UDP or TCP, type and code for ICMP, or 0 for other protocols
{ IP protocol
{ Ingress interface (SNMP ifIndex)
{ IP Type of Service

The proposed method for detecting network attacks based on the traffic  flow model is described in [10]. Traffic models shows that two parameters, the load of the channel and the number of active  flows in it, must be used for a full representation of the network state.
Two variables, the number of active flows and the utilization of the channel, best describe the current network state. Analysis of all data on the network, represented by individual points on the plane with axes, which are plotted the number of active flows and utilization of the network, allows to the definition of three areas that correspond to qualitatively
different states of the network.

The straight line corresponds to the part of the network that is characterized by a minimal loss of IP-packets, less than a half of one percent. The bent part of the curve corresponds to an overloaded network, and is characterized by a significant packet loss of up to 5%, which reduces the effective size of the
transferred segment of the TCP/IP. The third, nearly horizontal, portion of the curve corresponds to a completely unusable network with significant packet loss of over 5%.
The distribution of total load tends to a normal (Gaussian) distribution, since the total load of the studied channel is the result of multiplexing a large number of  flows that are independent of each other. The theoretical model allows us to estimate the confidence interval for the working area of the curve:
B(t) = b(N + kA(exp)sqrt(N)


Here A(exp) is the normal quantile function. Equation 1 indicates that the real state of the network, described by the number of active flows N and the flow data rate B(t), will be outside these limits in only 100% x exp of the total observation
time. The traffic model presented here allows the formulation of a simple criterion for finding anomalous network states: if several consecutive measurements go beyond the confidence interval of exp=0.05, we can confidently consider problems on the network. If we collect the data every 5 minutes, then the statistics of a few hours will make it possible to determine all the parameters of equation 1
with reasonable accuracy. Presumably, the network state will be out of the confidence interval during the progress of a network attack. During port scanning, the number of active

Flows will increase with a nearly constant load, as the data transmitted is only limited to establish the connection and to close it. The channel load as well as the flow number should sharply increase during the progress of DDoS attacks.
In order to prove these hypotheses it was decided to conduct two experiments with network scanning and with a DDoS attack.

Our studies have revealed patterns, based on the NetFlow data, that allow the IP addresses of the computers with which conducted DDoS attacks and port scans to be determined. Based on these patterns we developed an algorithm for attack detection. Before formulating the algorithm we will specify the format for
recording flow data:
{ Date and time of flow
{ Duration of flow (in seconds, up to thousandths)
{ Transfer protocol
{ IP address and source port
{ IP address and destination port
{ The number of transmitted packets
{ The number of bytes transferred
The algorithm developed for the detection of attacks such as DDoS and port scanning is:
1. Find IP-addresses of sources that generate a large number of flows.
   (a) If the size of these flows is very short, up to 50 bytes, it is most likely port scanning.
   (b) If the duration of the  flows is greater then this IP-address might be carrying out DoS attacks.
2. Find IP-addresses of sources that generate very long streams (lasting more than 5 minutes). The IP-address assignment can be carried out DoS attack in this case.
If many IP-addresses from which a potential DoS attack are found, we may classify this attack as DDoS. Suspicious IP addresses are entered into the database and all trafic from those addresses are blocked by an iptables firewall [16] for 5 minutes. Iptables is
installed on the protected server, i.e. only the server is protected, not the whole network.

Reference:
1. N. Paulauskas, E. Garsva, Computer System Attack Classication, Electronics and Electrical Engineering, 2(66), 2006.
2. J. Mirkovic, P. Reiher, A taxonomy of DDoS attack and DDoS defense mechanisms, ACM SIGCOMM Comput. Commun., 34(2), 2004, 3953.
3. A. Hussain, J. Heidemann, C. Paradopoulos, A Framework for Classifying Denial- of-Service Attacks, Karlsruhe, Germany, 2003, 99110.
4. C. Douligeris, A. Mitrokotsa, DDoS Attacks and Defense Mechanisms: Classification and State-of-the-art, Comp. Networks, 44, 2004, 64366.
5. V. Paxson, An Analysis of Using Reectors for Distributed Denial-of-Service Attacks, CCR, 31(3), July 2001.
6. R.K.C. Chang, Defending against Flooding-based Distributed Denial of Service Attacks: A tutorial, IEEE Communications Magazine 40(10) (2002), 4251.
7. Cisco IOS NetFlow site, Cisco Systems, Available at: www.cisco.com/go/netflow.
8. B. Claise, NetFlow Services Export Version 9, RFC 3954, 2004.
======================================================================================================================================================================================
Vykopal, Jan, Tomas Plesnik, and Pavel Minarik. "Network-based dictionary attack detection." 2009 international conference on future networks. IEEE, 2009.

This paper describes the novel network-based approach to a dictionary attack detection with the ability to recognize successful attack. We analyzed SSH break-in attempts at a flow level and determined a dictionary attack pattern. This pattern was verified and compared to common SSH traffic
to prevent false positives. The SSH dictionary attack pattern was implemented using decision tree technique. The evaluation was performed in a large high-speed university network with promising results.

When we received a report that one of our computer was participating in a phishing scam, we started to analyze the compromised host. Finally, we found out someone broke in the host via secure shell (SSH). The administrator set up
a weak password1, thus a dictionary attack was successful. We also inspected other host logs in our network and concluded such dictionary attacks are very common. Moreover, we deployed new SSH server with a public IP address. Consequently,
we encounter new attacks almost every day. As this real example shows, although there are many advanced authentication schemes such as biometric or hardware tokens, a knowledge-based authentication is still widespread. Unfortunately, human chosen passwords are
inherently insecure since a large fraction of the users chooses passwords that come from a small domain. This enables adversaries to attempt to login to accounts by trying all possible passwords, until they find the correct one. This attack is known as a dictionary attack [6].

We analyzed real attacks in the following way. First, we inspected logs on attacked hosts and then identified appropriate traffic in NetFlow data collected at the border of a university network or its subnets. A flow is defined as a unidirectional sequence of packets with some common
properties that pass through a network device. Network flows are highly granular; for example, flow records include details such as IP addresses, packet and byte counts, timestamps, Type of Service (ToS), application ports, input and output interfaces, etc. [4]
First of all, we searched for reconnaissance activities such as TCP SYN and FIN scanning that are invisible in access logs. Only one IP address that performed TCP SYN scanning before the dictionary attack was found. So we focused on this host and discovered other 93 592 TCP
SYN probes to 64 251 hosts in our class B network. In a nutshell, TCP scanning is not often preceding to SSH dictionary attacks.

Next, we focused on IP addresses of attackers in relevant
time windows known from host based analysis. We derived
the following dictionary attack pattern at NetFlow level:
-  TCP port of the victim is 224, TCP port of the attacker is generally random and greater than 1024,
-  many flows (tens or hundreds) from the attacker to the victim in a short time window (5 minutes),
- the flows from the attacker are small: from 10 to 30 packets and from 1 400 to 5 000 bytes,
- victims’ responses are small too (typically the same number of packets and bytes),
- flow duration is up to 5 seconds,
- the last flow is different in case of successful attempt.


We also analyzed network traffic of various applications that utilize the SSH protocol to eliminate false positives. We perform the following scenarios in both Linux andWindows operating system: To sum it up, we did not find any traffic that fully corresponds
to the attack pattern derived from real dictionary attacks. That means there was observed no flow that meets all requirements above.

Our SSH detection decision tree (SSH-D-tree) is presented in Figure 1. SSH-D-tree uses a subset of attributes of NetFlow record corresponding to SSH server response as the input data. This subset is formally a n-tuple: source ip address, destination ip address,
flow start, duration, packets, bytes. Each component of this n-tuple except of flow start forms a level of the SSH-D-tree. To avoid false positives, especially scans, we consider only responses having number of packets greater then certain constant.
Another false positives may raise from secured data uploading; therefore we use bytes per packet indicator in requests corresponding to given replies.
SSH-D-tree starts with a set of input n-tuples ordered by flow start and processes individual flows in sequence. The tree also starts with generic bounds for flow duration, number of packets and number of bytes transferred that fit to all attacks. For each pair (attacker; victim) arrays
of attack indicators are build (duration array, packets array and bytes array) until singleAttackAttempts threshold is reached. New bounds for given attacker and victim are calculated using toleration parameters afterwards.

SSH-D-tree uses two types of parameters. First type of parameters is static. These parameters specify namely the sensitivity of the detection procedure. The second type of parameters is called dynamic.

Static (initial)
– arraySize – length of attack indicator history influencing bounds for duration, packets, bytes
– singleAttackAttempts – number of attempts from single source to alert attack (length of learning process of the attack indicators between attacker and its victim)
– distributedAttackAttempts – number of attempts from all sources to alert attack
– certaintyReductionFactor – reduction factor of the success of attack
– tsDelta – maximum time difference between two attempts of attack from single source
– initialDurationBounds, initialPacketsBounds, initialBytesBounds – initial bounds of duration, numbers of packets and bytes in SSH server response
– deltaDuration, deltaPackets, deltaBytes – tolerance factors to calculate dynamically changing bounds of expected flow duration, number of packets and number of bytes transferred

Dynamic (calculated)
– vAAC, aAAC – victim/attacker attack counter.
– tsLA – last attack attempt time stamp.
– Daar, Paar, Baar – duration array, packets array, bytes array computed continuously during the attack for each pair (victim; attacker).

This section summarizes operations performed during the detection process except bounds check operations which are obvious:
-  tsLA test (Last attack attempt time stamp test)
	– flow start > tsLA + tsDelta ) drop whole subtree from the given attacker level and create a new one.
- SUCC (Successful attack report)
	– aAAC > singleAttackAttempts ) mark attacker as successful and victim as compromised.
- Aup (Attack attempt update)
	– aAAC = aAAC + 1, vAAC = vAAC + 1.
	– aAAC > singleAttackAttempts ) mark attacker as unsuccessful and victim as resisting or divide certainty of successful attacker and compromised victim by certaintyReductionFactor.
- Bup (Bounds update)
	– update arrays Daar, Paar, Baar according to actual values of flow duration, number of packets and number of bytes transferred. Calculate new bounds as the arithmetic mean of values in the array reduced by or increased by tolerance factor respectively.
	
	From the performance point of view, our SSH-D-tree is able to process approximately 2 500 flows per second on COTS (cost of-the-shelf) hardware.
	
[4] B. Claise. Cisco Systems NetFlow Services Export Version 9. RFC 3954 (Informational), Oct. 2004.
[6] B. Pinkas and T. Sander. Securing passwords against dictionary attacks. In CCS ’02: Proceedings of the 9th ACM conference on Computer and communications security, pages 161–170, New York, NY, USA, 2002. ACM
======================================================================================================================================================================================
Munz, Gerhard, and Georg Carle. "Real-time analysis of flow data for network attack detection." 2007 10th IFIP/IEEE International Symposium on Integrated Network Management. IEEE, 2007


======================================================================================================================================================================================
Al-Jarrah, Omar, and Ahmad Arafat. "Network Intrusion Detection System using attack behavior classification." 2014 5th International Conference on Information and Communication Systems (ICICS). IEEE, 2014.


======================================================================================================================================================================================
Wang, Ke, and Salvatore J. Stolfo. "Anomalous payload-based network intrusion detection." International Workshop on Recent Advances in Intrusion Detection. Springer, Berlin, Heidelberg, 2004.


======================================================================================================================================================================================
Mantere, Matti, Mirko Sailio, and Sami Noponen. "Network traffic features for anomaly detection in specific industrial control system network." Future Internet 5.4 (2013): 460-473.


======================================================================================================================================================================================
Sperotto, Anna, et al. "An overview of IP flow-based intrusion detection." IEEE communications surveys & tutorials 12.3 (2010): 343-356. 


======================================================================================================================================================================================
Strayer, W. Timothy, et al. "Botnet detection based on network behavior." Botnet detection. Springer, Boston, MA, 2008. 1-24.


======================================================================================================================================================================================
Mahoney, Matthew V., and Philip K. Chan. PHAD: Packet header anomaly detection for identifying hostile network traffic. 2001.